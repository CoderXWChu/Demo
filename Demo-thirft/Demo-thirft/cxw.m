/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"


#import "cxw.h"

@implementation TTGDailyDataForSale

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithType: (int) type name: (NSString *) name countD: (int32_t) countD sales: (double) sales
{
  self = [super init];
  __type = type;
  __type_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __countD = countD;
  __countD_isset = YES;
  __sales = sales;
  __sales_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"countD"])
  {
    __countD = [decoder decodeInt32ForKey: @"countD"];
    __countD_isset = YES;
  }
  if ([decoder containsValueForKey: @"sales"])
  {
    __sales = [decoder decodeDoubleForKey: @"sales"];
    __sales_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__countD_isset)
  {
    [encoder encodeInt32: __countD forKey: @"countD"];
  }
  if (__sales_isset)
  {
    [encoder encodeDouble: __sales forKey: @"sales"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __countD_isset ? 2654435761 : 0;
  if (__countD_isset)
  {
    hash = (hash * 31) ^ [@(__countD) hash];
  }
  hash = (hash * 31) ^ __sales_isset ? 2654435761 : 0;
  if (__sales_isset)
  {
    hash = (hash * 31) ^ [@(__sales) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGDailyDataForSale class]]) {
    return NO;
  }
  TTGDailyDataForSale *other = (TTGDailyDataForSale *)anObject;
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__countD_isset != other->__countD_isset) ||
      (__countD_isset && (__countD != other->__countD))) {
    return NO;
  }
  if ((__sales_isset != other->__sales_isset) ||
      (__sales_isset && (__sales != other->__sales))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (int32_t) countD {
  return __countD;
}

- (void) setCountD: (int32_t) countD {
  __countD = countD;
  __countD_isset = YES;
}

- (BOOL) countDIsSet {
  return __countD_isset;
}

- (void) unsetCountD {
  __countD_isset = NO;
}

- (double) sales {
  return __sales;
}

- (void) setSales: (double) sales {
  __sales = sales;
  __sales_isset = YES;
}

- (BOOL) salesIsSet {
  return __sales_isset;
}

- (void) unsetSales {
  __sales_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCountD: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setSales: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DailyDataForSale"];
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__countD_isset) {
    [outProtocol writeFieldBeginWithName: @"countD" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __countD];
    [outProtocol writeFieldEnd];
  }
  if (__sales_isset) {
    [outProtocol writeFieldBeginWithName: @"sales" type: TType_DOUBLE fieldID: 4];
    [outProtocol writeDouble: __sales];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGDailyDataForSale("];
  [ms appendString: @"type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",countD:"];
  [ms appendFormat: @"%i", __countD];
  [ms appendString: @",sales:"];
  [ms appendFormat: @"%f", __sales];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTGDailyDataForShop

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSid: (int32_t) sid name: (NSString *) name lastSales: (double) lastSales currentSales: (double) currentSales
{
  self = [super init];
  __sid = sid;
  __sid_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __lastSales = lastSales;
  __lastSales_isset = YES;
  __currentSales = currentSales;
  __currentSales_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sid"])
  {
    __sid = [decoder decodeInt32ForKey: @"sid"];
    __sid_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastSales"])
  {
    __lastSales = [decoder decodeDoubleForKey: @"lastSales"];
    __lastSales_isset = YES;
  }
  if ([decoder containsValueForKey: @"currentSales"])
  {
    __currentSales = [decoder decodeDoubleForKey: @"currentSales"];
    __currentSales_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sid_isset)
  {
    [encoder encodeInt32: __sid forKey: @"sid"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__lastSales_isset)
  {
    [encoder encodeDouble: __lastSales forKey: @"lastSales"];
  }
  if (__currentSales_isset)
  {
    [encoder encodeDouble: __currentSales forKey: @"currentSales"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __sid_isset ? 2654435761 : 0;
  if (__sid_isset)
  {
    hash = (hash * 31) ^ [@(__sid) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __lastSales_isset ? 2654435761 : 0;
  if (__lastSales_isset)
  {
    hash = (hash * 31) ^ [@(__lastSales) hash];
  }
  hash = (hash * 31) ^ __currentSales_isset ? 2654435761 : 0;
  if (__currentSales_isset)
  {
    hash = (hash * 31) ^ [@(__currentSales) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGDailyDataForShop class]]) {
    return NO;
  }
  TTGDailyDataForShop *other = (TTGDailyDataForShop *)anObject;
  if ((__sid_isset != other->__sid_isset) ||
      (__sid_isset && (__sid != other->__sid))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__lastSales_isset != other->__lastSales_isset) ||
      (__lastSales_isset && (__lastSales != other->__lastSales))) {
    return NO;
  }
  if ((__currentSales_isset != other->__currentSales_isset) ||
      (__currentSales_isset && (__currentSales != other->__currentSales))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (int32_t) sid {
  return __sid;
}

- (void) setSid: (int32_t) sid {
  __sid = sid;
  __sid_isset = YES;
}

- (BOOL) sidIsSet {
  return __sid_isset;
}

- (void) unsetSid {
  __sid_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (double) lastSales {
  return __lastSales;
}

- (void) setLastSales: (double) lastSales {
  __lastSales = lastSales;
  __lastSales_isset = YES;
}

- (BOOL) lastSalesIsSet {
  return __lastSales_isset;
}

- (void) unsetLastSales {
  __lastSales_isset = NO;
}

- (double) currentSales {
  return __currentSales;
}

- (void) setCurrentSales: (double) currentSales {
  __currentSales = currentSales;
  __currentSales_isset = YES;
}

- (BOOL) currentSalesIsSet {
  return __currentSales_isset;
}

- (void) unsetCurrentSales {
  __currentSales_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLastSales: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setCurrentSales: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DailyDataForShop"];
  if (__sid_isset) {
    [outProtocol writeFieldBeginWithName: @"sid" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __sid];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastSales_isset) {
    [outProtocol writeFieldBeginWithName: @"lastSales" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __lastSales];
    [outProtocol writeFieldEnd];
  }
  if (__currentSales_isset) {
    [outProtocol writeFieldBeginWithName: @"currentSales" type: TType_DOUBLE fieldID: 4];
    [outProtocol writeDouble: __currentSales];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGDailyDataForShop("];
  [ms appendString: @"sid:"];
  [ms appendFormat: @"%i", __sid];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",lastSales:"];
  [ms appendFormat: @"%f", __lastSales];
  [ms appendString: @",currentSales:"];
  [ms appendFormat: @"%f", __currentSales];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTGDailyDataForCompany

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithLastTotalSales: (double) lastTotalSales currentTotalSales: (double) currentTotalSales dailyTotalDataForCompany: (NSMutableArray *) dailyTotalDataForCompany
{
  self = [super init];
  __lastTotalSales = lastTotalSales;
  __lastTotalSales_isset = YES;
  __currentTotalSales = currentTotalSales;
  __currentTotalSales_isset = YES;
  __dailyTotalDataForCompany = [dailyTotalDataForCompany retain_stub];
  __dailyTotalDataForCompany_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"lastTotalSales"])
  {
    __lastTotalSales = [decoder decodeDoubleForKey: @"lastTotalSales"];
    __lastTotalSales_isset = YES;
  }
  if ([decoder containsValueForKey: @"currentTotalSales"])
  {
    __currentTotalSales = [decoder decodeDoubleForKey: @"currentTotalSales"];
    __currentTotalSales_isset = YES;
  }
  if ([decoder containsValueForKey: @"dailyTotalDataForCompany"])
  {
    __dailyTotalDataForCompany = [[decoder decodeObjectForKey: @"dailyTotalDataForCompany"] retain_stub];
    __dailyTotalDataForCompany_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__lastTotalSales_isset)
  {
    [encoder encodeDouble: __lastTotalSales forKey: @"lastTotalSales"];
  }
  if (__currentTotalSales_isset)
  {
    [encoder encodeDouble: __currentTotalSales forKey: @"currentTotalSales"];
  }
  if (__dailyTotalDataForCompany_isset)
  {
    [encoder encodeObject: __dailyTotalDataForCompany forKey: @"dailyTotalDataForCompany"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __lastTotalSales_isset ? 2654435761 : 0;
  if (__lastTotalSales_isset)
  {
    hash = (hash * 31) ^ [@(__lastTotalSales) hash];
  }
  hash = (hash * 31) ^ __currentTotalSales_isset ? 2654435761 : 0;
  if (__currentTotalSales_isset)
  {
    hash = (hash * 31) ^ [@(__currentTotalSales) hash];
  }
  hash = (hash * 31) ^ __dailyTotalDataForCompany_isset ? 2654435761 : 0;
  if (__dailyTotalDataForCompany_isset)
  {
    hash = (hash * 31) ^ [__dailyTotalDataForCompany hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGDailyDataForCompany class]]) {
    return NO;
  }
  TTGDailyDataForCompany *other = (TTGDailyDataForCompany *)anObject;
  if ((__lastTotalSales_isset != other->__lastTotalSales_isset) ||
      (__lastTotalSales_isset && (__lastTotalSales != other->__lastTotalSales))) {
    return NO;
  }
  if ((__currentTotalSales_isset != other->__currentTotalSales_isset) ||
      (__currentTotalSales_isset && (__currentTotalSales != other->__currentTotalSales))) {
    return NO;
  }
  if ((__dailyTotalDataForCompany_isset != other->__dailyTotalDataForCompany_isset) ||
      (__dailyTotalDataForCompany_isset && ((__dailyTotalDataForCompany || other->__dailyTotalDataForCompany) && ![__dailyTotalDataForCompany isEqual:other->__dailyTotalDataForCompany]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__dailyTotalDataForCompany release_stub];
  [super dealloc_stub];
}

- (double) lastTotalSales {
  return __lastTotalSales;
}

- (void) setLastTotalSales: (double) lastTotalSales {
  __lastTotalSales = lastTotalSales;
  __lastTotalSales_isset = YES;
}

- (BOOL) lastTotalSalesIsSet {
  return __lastTotalSales_isset;
}

- (void) unsetLastTotalSales {
  __lastTotalSales_isset = NO;
}

- (double) currentTotalSales {
  return __currentTotalSales;
}

- (void) setCurrentTotalSales: (double) currentTotalSales {
  __currentTotalSales = currentTotalSales;
  __currentTotalSales_isset = YES;
}

- (BOOL) currentTotalSalesIsSet {
  return __currentTotalSales_isset;
}

- (void) unsetCurrentTotalSales {
  __currentTotalSales_isset = NO;
}

- (NSMutableArray *) dailyTotalDataForCompany {
  return [[__dailyTotalDataForCompany retain_stub] autorelease_stub];
}

- (void) setDailyTotalDataForCompany: (NSMutableArray *) dailyTotalDataForCompany {
  [dailyTotalDataForCompany retain_stub];
  [__dailyTotalDataForCompany release_stub];
  __dailyTotalDataForCompany = dailyTotalDataForCompany;
  __dailyTotalDataForCompany_isset = YES;
}

- (BOOL) dailyTotalDataForCompanyIsSet {
  return __dailyTotalDataForCompany_isset;
}

- (void) unsetDailyTotalDataForCompany {
  [__dailyTotalDataForCompany release_stub];
  __dailyTotalDataForCompany = nil;
  __dailyTotalDataForCompany_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLastTotalSales: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setCurrentTotalSales: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            TTGDailyDataForSale *_elem2 = [[TTGDailyDataForSale alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setDailyTotalDataForCompany: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DailyDataForCompany"];
  if (__lastTotalSales_isset) {
    [outProtocol writeFieldBeginWithName: @"lastTotalSales" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __lastTotalSales];
    [outProtocol writeFieldEnd];
  }
  if (__currentTotalSales_isset) {
    [outProtocol writeFieldBeginWithName: @"currentTotalSales" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __currentTotalSales];
    [outProtocol writeFieldEnd];
  }
  if (__dailyTotalDataForCompany_isset) {
    if (__dailyTotalDataForCompany != nil) {
      [outProtocol writeFieldBeginWithName: @"dailyTotalDataForCompany" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__dailyTotalDataForCompany count]];
        int idx4;
        for (idx4 = 0; idx4 < [__dailyTotalDataForCompany count]; idx4++)
        {
          [[__dailyTotalDataForCompany objectAtIndex: idx4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGDailyDataForCompany("];
  [ms appendString: @"lastTotalSales:"];
  [ms appendFormat: @"%f", __lastTotalSales];
  [ms appendString: @",currentTotalSales:"];
  [ms appendFormat: @"%f", __currentTotalSales];
  [ms appendString: @",dailyTotalDataForCompany:"];
  [ms appendFormat: @"%@", __dailyTotalDataForCompany];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTGdailyReportRequest_C

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDate: (NSString *) date
{
  self = [super init];
  __date = [date retain_stub];
  __date_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"date"])
  {
    __date = [[decoder decodeObjectForKey: @"date"] retain_stub];
    __date_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__date_isset)
  {
    [encoder encodeObject: __date forKey: @"date"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __date_isset ? 2654435761 : 0;
  if (__date_isset)
  {
    hash = (hash * 31) ^ [__date hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGdailyReportRequest_C class]]) {
    return NO;
  }
  TTGdailyReportRequest_C *other = (TTGdailyReportRequest_C *)anObject;
  if ((__date_isset != other->__date_isset) ||
      (__date_isset && ((__date || other->__date) && ![__date isEqual:other->__date]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__date release_stub];
  [super dealloc_stub];
}

- (NSString *) date {
  return [[__date retain_stub] autorelease_stub];
}

- (void) setDate: (NSString *) date {
  [date retain_stub];
  [__date release_stub];
  __date = date;
  __date_isset = YES;
}

- (BOOL) dateIsSet {
  return __date_isset;
}

- (void) unsetDate {
  [__date release_stub];
  __date = nil;
  __date_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"dailyReportRequest_C"];
  if (__date_isset) {
    if (__date != nil) {
      [outProtocol writeFieldBeginWithName: @"date" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __date];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGdailyReportRequest_C("];
  [ms appendString: @"date:"];
  [ms appendFormat: @"\"%@\"", __date];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTGdailyReportRequest_S

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithState: (int) state message: (NSString *) message dailyDataForCompany: (TTGDailyDataForCompany *) dailyDataForCompany dailyDataForShopList: (NSMutableArray *) dailyDataForShopList
{
  self = [super init];
  __state = state;
  __state_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  __dailyDataForCompany = [dailyDataForCompany retain_stub];
  __dailyDataForCompany_isset = YES;
  __dailyDataForShopList = [dailyDataForShopList retain_stub];
  __dailyDataForShopList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"state"])
  {
    __state = [decoder decodeIntForKey: @"state"];
    __state_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"dailyDataForCompany"])
  {
    __dailyDataForCompany = [[decoder decodeObjectForKey: @"dailyDataForCompany"] retain_stub];
    __dailyDataForCompany_isset = YES;
  }
  if ([decoder containsValueForKey: @"dailyDataForShopList"])
  {
    __dailyDataForShopList = [[decoder decodeObjectForKey: @"dailyDataForShopList"] retain_stub];
    __dailyDataForShopList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__state_isset)
  {
    [encoder encodeInt: __state forKey: @"state"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__dailyDataForCompany_isset)
  {
    [encoder encodeObject: __dailyDataForCompany forKey: @"dailyDataForCompany"];
  }
  if (__dailyDataForShopList_isset)
  {
    [encoder encodeObject: __dailyDataForShopList forKey: @"dailyDataForShopList"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __state_isset ? 2654435761 : 0;
  if (__state_isset)
  {
    hash = (hash * 31) ^ [@(__state) hash];
  }
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __dailyDataForCompany_isset ? 2654435761 : 0;
  if (__dailyDataForCompany_isset)
  {
    hash = (hash * 31) ^ [__dailyDataForCompany hash];
  }
  hash = (hash * 31) ^ __dailyDataForShopList_isset ? 2654435761 : 0;
  if (__dailyDataForShopList_isset)
  {
    hash = (hash * 31) ^ [__dailyDataForShopList hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGdailyReportRequest_S class]]) {
    return NO;
  }
  TTGdailyReportRequest_S *other = (TTGdailyReportRequest_S *)anObject;
  if ((__state_isset != other->__state_isset) ||
      (__state_isset && (__state != other->__state))) {
    return NO;
  }
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__dailyDataForCompany_isset != other->__dailyDataForCompany_isset) ||
      (__dailyDataForCompany_isset && ((__dailyDataForCompany || other->__dailyDataForCompany) && ![__dailyDataForCompany isEqual:other->__dailyDataForCompany]))) {
    return NO;
  }
  if ((__dailyDataForShopList_isset != other->__dailyDataForShopList_isset) ||
      (__dailyDataForShopList_isset && ((__dailyDataForShopList || other->__dailyDataForShopList) && ![__dailyDataForShopList isEqual:other->__dailyDataForShopList]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__dailyDataForCompany release_stub];
  [__dailyDataForShopList release_stub];
  [super dealloc_stub];
}

- (int) state {
  return __state;
}

- (void) setState: (int) state {
  __state = state;
  __state_isset = YES;
}

- (BOOL) stateIsSet {
  return __state_isset;
}

- (void) unsetState {
  __state_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (TTGDailyDataForCompany *) dailyDataForCompany {
  return [[__dailyDataForCompany retain_stub] autorelease_stub];
}

- (void) setDailyDataForCompany: (TTGDailyDataForCompany *) dailyDataForCompany {
  [dailyDataForCompany retain_stub];
  [__dailyDataForCompany release_stub];
  __dailyDataForCompany = dailyDataForCompany;
  __dailyDataForCompany_isset = YES;
}

- (BOOL) dailyDataForCompanyIsSet {
  return __dailyDataForCompany_isset;
}

- (void) unsetDailyDataForCompany {
  [__dailyDataForCompany release_stub];
  __dailyDataForCompany = nil;
  __dailyDataForCompany_isset = NO;
}

- (NSMutableArray *) dailyDataForShopList {
  return [[__dailyDataForShopList retain_stub] autorelease_stub];
}

- (void) setDailyDataForShopList: (NSMutableArray *) dailyDataForShopList {
  [dailyDataForShopList retain_stub];
  [__dailyDataForShopList release_stub];
  __dailyDataForShopList = dailyDataForShopList;
  __dailyDataForShopList_isset = YES;
}

- (BOOL) dailyDataForShopListIsSet {
  return __dailyDataForShopList_isset;
}

- (void) unsetDailyDataForShopList {
  [__dailyDataForShopList release_stub];
  __dailyDataForShopList = nil;
  __dailyDataForShopList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          TTGDailyDataForCompany *fieldValue = [[TTGDailyDataForCompany alloc] init];
          [fieldValue read: inProtocol];
          [self setDailyDataForCompany: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            TTGDailyDataForShop *_elem7 = [[TTGDailyDataForShop alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setDailyDataForShopList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"dailyReportRequest_S"];
  if (__state_isset) {
    [outProtocol writeFieldBeginWithName: @"state" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __state];
    [outProtocol writeFieldEnd];
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dailyDataForCompany_isset) {
    if (__dailyDataForCompany != nil) {
      [outProtocol writeFieldBeginWithName: @"dailyDataForCompany" type: TType_STRUCT fieldID: 3];
      [__dailyDataForCompany write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dailyDataForShopList_isset) {
    if (__dailyDataForShopList != nil) {
      [outProtocol writeFieldBeginWithName: @"dailyDataForShopList" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__dailyDataForShopList count]];
        int idx9;
        for (idx9 = 0; idx9 < [__dailyDataForShopList count]; idx9++)
        {
          [[__dailyDataForShopList objectAtIndex: idx9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGdailyReportRequest_S("];
  [ms appendString: @"state:"];
  [ms appendFormat: @"%i", __state];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",dailyDataForCompany:"];
  [ms appendFormat: @"%@", __dailyDataForCompany];
  [ms appendString: @",dailyDataForShopList:"];
  [ms appendFormat: @"%@", __dailyDataForShopList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTGDailyRankForDish

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name count_D: (int32_t) count_D
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __count_D = count_D;
  __count_D_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"count_D"])
  {
    __count_D = [decoder decodeInt32ForKey: @"count_D"];
    __count_D_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__count_D_isset)
  {
    [encoder encodeInt32: __count_D forKey: @"count_D"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __count_D_isset ? 2654435761 : 0;
  if (__count_D_isset)
  {
    hash = (hash * 31) ^ [@(__count_D) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGDailyRankForDish class]]) {
    return NO;
  }
  TTGDailyRankForDish *other = (TTGDailyRankForDish *)anObject;
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__count_D_isset != other->__count_D_isset) ||
      (__count_D_isset && (__count_D != other->__count_D))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (int32_t) count_D {
  return __count_D;
}

- (void) setCount_D: (int32_t) count_D {
  __count_D = count_D;
  __count_D_isset = YES;
}

- (BOOL) count_DIsSet {
  return __count_D_isset;
}

- (void) unsetCount_D {
  __count_D_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCount_D: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DailyRankForDish"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__count_D_isset) {
    [outProtocol writeFieldBeginWithName: @"count_D" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __count_D];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGDailyRankForDish("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",count_D:"];
  [ms appendFormat: @"%i", __count_D];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTGDailyRankForPrice

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name totalPrice: (double) totalPrice
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __totalPrice = totalPrice;
  __totalPrice_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalPrice"])
  {
    __totalPrice = [decoder decodeDoubleForKey: @"totalPrice"];
    __totalPrice_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__totalPrice_isset)
  {
    [encoder encodeDouble: __totalPrice forKey: @"totalPrice"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __totalPrice_isset ? 2654435761 : 0;
  if (__totalPrice_isset)
  {
    hash = (hash * 31) ^ [@(__totalPrice) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGDailyRankForPrice class]]) {
    return NO;
  }
  TTGDailyRankForPrice *other = (TTGDailyRankForPrice *)anObject;
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__totalPrice_isset != other->__totalPrice_isset) ||
      (__totalPrice_isset && (__totalPrice != other->__totalPrice))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (double) totalPrice {
  return __totalPrice;
}

- (void) setTotalPrice: (double) totalPrice {
  __totalPrice = totalPrice;
  __totalPrice_isset = YES;
}

- (BOOL) totalPriceIsSet {
  return __totalPrice_isset;
}

- (void) unsetTotalPrice {
  __totalPrice_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setTotalPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DailyRankForPrice"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalPrice_isset) {
    [outProtocol writeFieldBeginWithName: @"totalPrice" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __totalPrice];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGDailyRankForPrice("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",totalPrice:"];
  [ms appendFormat: @"%f", __totalPrice];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTGDailyRank

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDailyRankForSaleGoodList: (NSMutableArray *) dailyRankForSaleGoodList dailyRankForPriceList: (NSMutableArray *) dailyRankForPriceList dailyRankForSaleTerribleList: (NSMutableArray *) dailyRankForSaleTerribleList
{
  self = [super init];
  __dailyRankForSaleGoodList = [dailyRankForSaleGoodList retain_stub];
  __dailyRankForSaleGoodList_isset = YES;
  __dailyRankForPriceList = [dailyRankForPriceList retain_stub];
  __dailyRankForPriceList_isset = YES;
  __dailyRankForSaleTerribleList = [dailyRankForSaleTerribleList retain_stub];
  __dailyRankForSaleTerribleList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dailyRankForSaleGoodList"])
  {
    __dailyRankForSaleGoodList = [[decoder decodeObjectForKey: @"dailyRankForSaleGoodList"] retain_stub];
    __dailyRankForSaleGoodList_isset = YES;
  }
  if ([decoder containsValueForKey: @"dailyRankForPriceList"])
  {
    __dailyRankForPriceList = [[decoder decodeObjectForKey: @"dailyRankForPriceList"] retain_stub];
    __dailyRankForPriceList_isset = YES;
  }
  if ([decoder containsValueForKey: @"dailyRankForSaleTerribleList"])
  {
    __dailyRankForSaleTerribleList = [[decoder decodeObjectForKey: @"dailyRankForSaleTerribleList"] retain_stub];
    __dailyRankForSaleTerribleList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dailyRankForSaleGoodList_isset)
  {
    [encoder encodeObject: __dailyRankForSaleGoodList forKey: @"dailyRankForSaleGoodList"];
  }
  if (__dailyRankForPriceList_isset)
  {
    [encoder encodeObject: __dailyRankForPriceList forKey: @"dailyRankForPriceList"];
  }
  if (__dailyRankForSaleTerribleList_isset)
  {
    [encoder encodeObject: __dailyRankForSaleTerribleList forKey: @"dailyRankForSaleTerribleList"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __dailyRankForSaleGoodList_isset ? 2654435761 : 0;
  if (__dailyRankForSaleGoodList_isset)
  {
    hash = (hash * 31) ^ [__dailyRankForSaleGoodList hash];
  }
  hash = (hash * 31) ^ __dailyRankForPriceList_isset ? 2654435761 : 0;
  if (__dailyRankForPriceList_isset)
  {
    hash = (hash * 31) ^ [__dailyRankForPriceList hash];
  }
  hash = (hash * 31) ^ __dailyRankForSaleTerribleList_isset ? 2654435761 : 0;
  if (__dailyRankForSaleTerribleList_isset)
  {
    hash = (hash * 31) ^ [__dailyRankForSaleTerribleList hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGDailyRank class]]) {
    return NO;
  }
  TTGDailyRank *other = (TTGDailyRank *)anObject;
  if ((__dailyRankForSaleGoodList_isset != other->__dailyRankForSaleGoodList_isset) ||
      (__dailyRankForSaleGoodList_isset && ((__dailyRankForSaleGoodList || other->__dailyRankForSaleGoodList) && ![__dailyRankForSaleGoodList isEqual:other->__dailyRankForSaleGoodList]))) {
    return NO;
  }
  if ((__dailyRankForPriceList_isset != other->__dailyRankForPriceList_isset) ||
      (__dailyRankForPriceList_isset && ((__dailyRankForPriceList || other->__dailyRankForPriceList) && ![__dailyRankForPriceList isEqual:other->__dailyRankForPriceList]))) {
    return NO;
  }
  if ((__dailyRankForSaleTerribleList_isset != other->__dailyRankForSaleTerribleList_isset) ||
      (__dailyRankForSaleTerribleList_isset && ((__dailyRankForSaleTerribleList || other->__dailyRankForSaleTerribleList) && ![__dailyRankForSaleTerribleList isEqual:other->__dailyRankForSaleTerribleList]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__dailyRankForSaleGoodList release_stub];
  [__dailyRankForPriceList release_stub];
  [__dailyRankForSaleTerribleList release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) dailyRankForSaleGoodList {
  return [[__dailyRankForSaleGoodList retain_stub] autorelease_stub];
}

- (void) setDailyRankForSaleGoodList: (NSMutableArray *) dailyRankForSaleGoodList {
  [dailyRankForSaleGoodList retain_stub];
  [__dailyRankForSaleGoodList release_stub];
  __dailyRankForSaleGoodList = dailyRankForSaleGoodList;
  __dailyRankForSaleGoodList_isset = YES;
}

- (BOOL) dailyRankForSaleGoodListIsSet {
  return __dailyRankForSaleGoodList_isset;
}

- (void) unsetDailyRankForSaleGoodList {
  [__dailyRankForSaleGoodList release_stub];
  __dailyRankForSaleGoodList = nil;
  __dailyRankForSaleGoodList_isset = NO;
}

- (NSMutableArray *) dailyRankForPriceList {
  return [[__dailyRankForPriceList retain_stub] autorelease_stub];
}

- (void) setDailyRankForPriceList: (NSMutableArray *) dailyRankForPriceList {
  [dailyRankForPriceList retain_stub];
  [__dailyRankForPriceList release_stub];
  __dailyRankForPriceList = dailyRankForPriceList;
  __dailyRankForPriceList_isset = YES;
}

- (BOOL) dailyRankForPriceListIsSet {
  return __dailyRankForPriceList_isset;
}

- (void) unsetDailyRankForPriceList {
  [__dailyRankForPriceList release_stub];
  __dailyRankForPriceList = nil;
  __dailyRankForPriceList_isset = NO;
}

- (NSMutableArray *) dailyRankForSaleTerribleList {
  return [[__dailyRankForSaleTerribleList retain_stub] autorelease_stub];
}

- (void) setDailyRankForSaleTerribleList: (NSMutableArray *) dailyRankForSaleTerribleList {
  [dailyRankForSaleTerribleList retain_stub];
  [__dailyRankForSaleTerribleList release_stub];
  __dailyRankForSaleTerribleList = dailyRankForSaleTerribleList;
  __dailyRankForSaleTerribleList_isset = YES;
}

- (BOOL) dailyRankForSaleTerribleListIsSet {
  return __dailyRankForSaleTerribleList_isset;
}

- (void) unsetDailyRankForSaleTerribleList {
  [__dailyRankForSaleTerribleList release_stub];
  __dailyRankForSaleTerribleList = nil;
  __dailyRankForSaleTerribleList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            TTGDailyRankForDish *_elem12 = [[TTGDailyRankForDish alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release_stub];
          }
          [inProtocol readListEnd];
          [self setDailyRankForSaleGoodList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size13;
          [inProtocol readListBeginReturningElementType: NULL size: &_size13];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size13];
          int _i14;
          for (_i14 = 0; _i14 < _size13; ++_i14)
          {
            TTGDailyRankForPrice *_elem15 = [[TTGDailyRankForPrice alloc] init];
            [_elem15 read: inProtocol];
            [fieldValue addObject: _elem15];
            [_elem15 release_stub];
          }
          [inProtocol readListEnd];
          [self setDailyRankForPriceList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size16;
          [inProtocol readListBeginReturningElementType: NULL size: &_size16];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size16];
          int _i17;
          for (_i17 = 0; _i17 < _size16; ++_i17)
          {
            TTGDailyRankForDish *_elem18 = [[TTGDailyRankForDish alloc] init];
            [_elem18 read: inProtocol];
            [fieldValue addObject: _elem18];
            [_elem18 release_stub];
          }
          [inProtocol readListEnd];
          [self setDailyRankForSaleTerribleList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DailyRank"];
  if (__dailyRankForSaleGoodList_isset) {
    if (__dailyRankForSaleGoodList != nil) {
      [outProtocol writeFieldBeginWithName: @"dailyRankForSaleGoodList" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__dailyRankForSaleGoodList count]];
        int idx20;
        for (idx20 = 0; idx20 < [__dailyRankForSaleGoodList count]; idx20++)
        {
          [[__dailyRankForSaleGoodList objectAtIndex: idx20] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__dailyRankForPriceList_isset) {
    if (__dailyRankForPriceList != nil) {
      [outProtocol writeFieldBeginWithName: @"dailyRankForPriceList" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__dailyRankForPriceList count]];
        int idx22;
        for (idx22 = 0; idx22 < [__dailyRankForPriceList count]; idx22++)
        {
          [[__dailyRankForPriceList objectAtIndex: idx22] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__dailyRankForSaleTerribleList_isset) {
    if (__dailyRankForSaleTerribleList != nil) {
      [outProtocol writeFieldBeginWithName: @"dailyRankForSaleTerribleList" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__dailyRankForSaleTerribleList count]];
        int idx24;
        for (idx24 = 0; idx24 < [__dailyRankForSaleTerribleList count]; idx24++)
        {
          [[__dailyRankForSaleTerribleList objectAtIndex: idx24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGDailyRank("];
  [ms appendString: @"dailyRankForSaleGoodList:"];
  [ms appendFormat: @"%@", __dailyRankForSaleGoodList];
  [ms appendString: @",dailyRankForPriceList:"];
  [ms appendFormat: @"%@", __dailyRankForPriceList];
  [ms appendString: @",dailyRankForSaleTerribleList:"];
  [ms appendFormat: @"%@", __dailyRankForSaleTerribleList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTGdailyRankRequest_C

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDate: (NSString *) date sid: (NSString *) sid num: (NSString *) num
{
  self = [super init];
  __date = [date retain_stub];
  __date_isset = YES;
  __sid = [sid retain_stub];
  __sid_isset = YES;
  __num = [num retain_stub];
  __num_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"date"])
  {
    __date = [[decoder decodeObjectForKey: @"date"] retain_stub];
    __date_isset = YES;
  }
  if ([decoder containsValueForKey: @"sid"])
  {
    __sid = [[decoder decodeObjectForKey: @"sid"] retain_stub];
    __sid_isset = YES;
  }
  if ([decoder containsValueForKey: @"num"])
  {
    __num = [[decoder decodeObjectForKey: @"num"] retain_stub];
    __num_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__date_isset)
  {
    [encoder encodeObject: __date forKey: @"date"];
  }
  if (__sid_isset)
  {
    [encoder encodeObject: __sid forKey: @"sid"];
  }
  if (__num_isset)
  {
    [encoder encodeObject: __num forKey: @"num"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __date_isset ? 2654435761 : 0;
  if (__date_isset)
  {
    hash = (hash * 31) ^ [__date hash];
  }
  hash = (hash * 31) ^ __sid_isset ? 2654435761 : 0;
  if (__sid_isset)
  {
    hash = (hash * 31) ^ [__sid hash];
  }
  hash = (hash * 31) ^ __num_isset ? 2654435761 : 0;
  if (__num_isset)
  {
    hash = (hash * 31) ^ [__num hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGdailyRankRequest_C class]]) {
    return NO;
  }
  TTGdailyRankRequest_C *other = (TTGdailyRankRequest_C *)anObject;
  if ((__date_isset != other->__date_isset) ||
      (__date_isset && ((__date || other->__date) && ![__date isEqual:other->__date]))) {
    return NO;
  }
  if ((__sid_isset != other->__sid_isset) ||
      (__sid_isset && ((__sid || other->__sid) && ![__sid isEqual:other->__sid]))) {
    return NO;
  }
  if ((__num_isset != other->__num_isset) ||
      (__num_isset && ((__num || other->__num) && ![__num isEqual:other->__num]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__date release_stub];
  [__sid release_stub];
  [__num release_stub];
  [super dealloc_stub];
}

- (NSString *) date {
  return [[__date retain_stub] autorelease_stub];
}

- (void) setDate: (NSString *) date {
  [date retain_stub];
  [__date release_stub];
  __date = date;
  __date_isset = YES;
}

- (BOOL) dateIsSet {
  return __date_isset;
}

- (void) unsetDate {
  [__date release_stub];
  __date = nil;
  __date_isset = NO;
}

- (NSString *) sid {
  return [[__sid retain_stub] autorelease_stub];
}

- (void) setSid: (NSString *) sid {
  [sid retain_stub];
  [__sid release_stub];
  __sid = sid;
  __sid_isset = YES;
}

- (BOOL) sidIsSet {
  return __sid_isset;
}

- (void) unsetSid {
  [__sid release_stub];
  __sid = nil;
  __sid_isset = NO;
}

- (NSString *) num {
  return [[__num retain_stub] autorelease_stub];
}

- (void) setNum: (NSString *) num {
  [num retain_stub];
  [__num release_stub];
  __num = num;
  __num_isset = YES;
}

- (BOOL) numIsSet {
  return __num_isset;
}

- (void) unsetNum {
  [__num release_stub];
  __num = nil;
  __num_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"dailyRankRequest_C"];
  if (__date_isset) {
    if (__date != nil) {
      [outProtocol writeFieldBeginWithName: @"date" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __date];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sid_isset) {
    if (__sid != nil) {
      [outProtocol writeFieldBeginWithName: @"sid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __sid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__num_isset) {
    if (__num != nil) {
      [outProtocol writeFieldBeginWithName: @"num" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __num];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGdailyRankRequest_C("];
  [ms appendString: @"date:"];
  [ms appendFormat: @"\"%@\"", __date];
  [ms appendString: @",sid:"];
  [ms appendFormat: @"\"%@\"", __sid];
  [ms appendString: @",num:"];
  [ms appendFormat: @"\"%@\"", __num];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTGdailyRankRequest_S

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithState: (int) state message: (NSString *) message dailyRank: (TTGDailyRank *) dailyRank
{
  self = [super init];
  __state = state;
  __state_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  __dailyRank = [dailyRank retain_stub];
  __dailyRank_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"state"])
  {
    __state = [decoder decodeIntForKey: @"state"];
    __state_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"dailyRank"])
  {
    __dailyRank = [[decoder decodeObjectForKey: @"dailyRank"] retain_stub];
    __dailyRank_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__state_isset)
  {
    [encoder encodeInt: __state forKey: @"state"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__dailyRank_isset)
  {
    [encoder encodeObject: __dailyRank forKey: @"dailyRank"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __state_isset ? 2654435761 : 0;
  if (__state_isset)
  {
    hash = (hash * 31) ^ [@(__state) hash];
  }
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __dailyRank_isset ? 2654435761 : 0;
  if (__dailyRank_isset)
  {
    hash = (hash * 31) ^ [__dailyRank hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGdailyRankRequest_S class]]) {
    return NO;
  }
  TTGdailyRankRequest_S *other = (TTGdailyRankRequest_S *)anObject;
  if ((__state_isset != other->__state_isset) ||
      (__state_isset && (__state != other->__state))) {
    return NO;
  }
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__dailyRank_isset != other->__dailyRank_isset) ||
      (__dailyRank_isset && ((__dailyRank || other->__dailyRank) && ![__dailyRank isEqual:other->__dailyRank]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__dailyRank release_stub];
  [super dealloc_stub];
}

- (int) state {
  return __state;
}

- (void) setState: (int) state {
  __state = state;
  __state_isset = YES;
}

- (BOOL) stateIsSet {
  return __state_isset;
}

- (void) unsetState {
  __state_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (TTGDailyRank *) dailyRank {
  return [[__dailyRank retain_stub] autorelease_stub];
}

- (void) setDailyRank: (TTGDailyRank *) dailyRank {
  [dailyRank retain_stub];
  [__dailyRank release_stub];
  __dailyRank = dailyRank;
  __dailyRank_isset = YES;
}

- (BOOL) dailyRankIsSet {
  return __dailyRank_isset;
}

- (void) unsetDailyRank {
  [__dailyRank release_stub];
  __dailyRank = nil;
  __dailyRank_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          TTGDailyRank *fieldValue = [[TTGDailyRank alloc] init];
          [fieldValue read: inProtocol];
          [self setDailyRank: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"dailyRankRequest_S"];
  if (__state_isset) {
    [outProtocol writeFieldBeginWithName: @"state" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __state];
    [outProtocol writeFieldEnd];
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dailyRank_isset) {
    if (__dailyRank != nil) {
      [outProtocol writeFieldBeginWithName: @"dailyRank" type: TType_STRUCT fieldID: 3];
      [__dailyRank write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGdailyRankRequest_S("];
  [ms appendString: @"state:"];
  [ms appendFormat: @"%i", __state];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",dailyRank:"];
  [ms appendFormat: @"%@", __dailyRank];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTGTakeAwayInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithType: (int) type countT: (int32_t) countT sales: (double) sales
{
  self = [super init];
  __type = type;
  __type_isset = YES;
  __countT = countT;
  __countT_isset = YES;
  __sales = sales;
  __sales_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"countT"])
  {
    __countT = [decoder decodeInt32ForKey: @"countT"];
    __countT_isset = YES;
  }
  if ([decoder containsValueForKey: @"sales"])
  {
    __sales = [decoder decodeDoubleForKey: @"sales"];
    __sales_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__countT_isset)
  {
    [encoder encodeInt32: __countT forKey: @"countT"];
  }
  if (__sales_isset)
  {
    [encoder encodeDouble: __sales forKey: @"sales"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  hash = (hash * 31) ^ __countT_isset ? 2654435761 : 0;
  if (__countT_isset)
  {
    hash = (hash * 31) ^ [@(__countT) hash];
  }
  hash = (hash * 31) ^ __sales_isset ? 2654435761 : 0;
  if (__sales_isset)
  {
    hash = (hash * 31) ^ [@(__sales) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGTakeAwayInfo class]]) {
    return NO;
  }
  TTGTakeAwayInfo *other = (TTGTakeAwayInfo *)anObject;
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  if ((__countT_isset != other->__countT_isset) ||
      (__countT_isset && (__countT != other->__countT))) {
    return NO;
  }
  if ((__sales_isset != other->__sales_isset) ||
      (__sales_isset && (__sales != other->__sales))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (int32_t) countT {
  return __countT;
}

- (void) setCountT: (int32_t) countT {
  __countT = countT;
  __countT_isset = YES;
}

- (BOOL) countTIsSet {
  return __countT_isset;
}

- (void) unsetCountT {
  __countT_isset = NO;
}

- (double) sales {
  return __sales;
}

- (void) setSales: (double) sales {
  __sales = sales;
  __sales_isset = YES;
}

- (BOOL) salesIsSet {
  return __sales_isset;
}

- (void) unsetSales {
  __sales_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCountT: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setSales: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TakeAwayInfo"];
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__countT_isset) {
    [outProtocol writeFieldBeginWithName: @"countT" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __countT];
    [outProtocol writeFieldEnd];
  }
  if (__sales_isset) {
    [outProtocol writeFieldBeginWithName: @"sales" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __sales];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGTakeAwayInfo("];
  [ms appendString: @"type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",countT:"];
  [ms appendFormat: @"%i", __countT];
  [ms appendString: @",sales:"];
  [ms appendFormat: @"%f", __sales];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTGDailyReportForShop

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUnionPay: (double) unionPay mobilePay: (double) mobilePay otherPay: (double) otherPay takeAwayInfoList: (NSMutableArray *) takeAwayInfoList saleInDayTime: (NSMutableArray *) saleInDayTime saleInWeekTime: (NSMutableArray *) saleInWeekTime takeAwayInfoListInDayTime: (NSMutableArray *) takeAwayInfoListInDayTime takeAwayInfoListInWeekTime: (NSMutableArray *) takeAwayInfoListInWeekTime
{
  self = [super init];
  __unionPay = unionPay;
  __unionPay_isset = YES;
  __mobilePay = mobilePay;
  __mobilePay_isset = YES;
  __otherPay = otherPay;
  __otherPay_isset = YES;
  __takeAwayInfoList = [takeAwayInfoList retain_stub];
  __takeAwayInfoList_isset = YES;
  __saleInDayTime = [saleInDayTime retain_stub];
  __saleInDayTime_isset = YES;
  __saleInWeekTime = [saleInWeekTime retain_stub];
  __saleInWeekTime_isset = YES;
  __takeAwayInfoListInDayTime = [takeAwayInfoListInDayTime retain_stub];
  __takeAwayInfoListInDayTime_isset = YES;
  __takeAwayInfoListInWeekTime = [takeAwayInfoListInWeekTime retain_stub];
  __takeAwayInfoListInWeekTime_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"unionPay"])
  {
    __unionPay = [decoder decodeDoubleForKey: @"unionPay"];
    __unionPay_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobilePay"])
  {
    __mobilePay = [decoder decodeDoubleForKey: @"mobilePay"];
    __mobilePay_isset = YES;
  }
  if ([decoder containsValueForKey: @"otherPay"])
  {
    __otherPay = [decoder decodeDoubleForKey: @"otherPay"];
    __otherPay_isset = YES;
  }
  if ([decoder containsValueForKey: @"takeAwayInfoList"])
  {
    __takeAwayInfoList = [[decoder decodeObjectForKey: @"takeAwayInfoList"] retain_stub];
    __takeAwayInfoList_isset = YES;
  }
  if ([decoder containsValueForKey: @"saleInDayTime"])
  {
    __saleInDayTime = [[decoder decodeObjectForKey: @"saleInDayTime"] retain_stub];
    __saleInDayTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"saleInWeekTime"])
  {
    __saleInWeekTime = [[decoder decodeObjectForKey: @"saleInWeekTime"] retain_stub];
    __saleInWeekTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"takeAwayInfoListInDayTime"])
  {
    __takeAwayInfoListInDayTime = [[decoder decodeObjectForKey: @"takeAwayInfoListInDayTime"] retain_stub];
    __takeAwayInfoListInDayTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"takeAwayInfoListInWeekTime"])
  {
    __takeAwayInfoListInWeekTime = [[decoder decodeObjectForKey: @"takeAwayInfoListInWeekTime"] retain_stub];
    __takeAwayInfoListInWeekTime_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__unionPay_isset)
  {
    [encoder encodeDouble: __unionPay forKey: @"unionPay"];
  }
  if (__mobilePay_isset)
  {
    [encoder encodeDouble: __mobilePay forKey: @"mobilePay"];
  }
  if (__otherPay_isset)
  {
    [encoder encodeDouble: __otherPay forKey: @"otherPay"];
  }
  if (__takeAwayInfoList_isset)
  {
    [encoder encodeObject: __takeAwayInfoList forKey: @"takeAwayInfoList"];
  }
  if (__saleInDayTime_isset)
  {
    [encoder encodeObject: __saleInDayTime forKey: @"saleInDayTime"];
  }
  if (__saleInWeekTime_isset)
  {
    [encoder encodeObject: __saleInWeekTime forKey: @"saleInWeekTime"];
  }
  if (__takeAwayInfoListInDayTime_isset)
  {
    [encoder encodeObject: __takeAwayInfoListInDayTime forKey: @"takeAwayInfoListInDayTime"];
  }
  if (__takeAwayInfoListInWeekTime_isset)
  {
    [encoder encodeObject: __takeAwayInfoListInWeekTime forKey: @"takeAwayInfoListInWeekTime"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __unionPay_isset ? 2654435761 : 0;
  if (__unionPay_isset)
  {
    hash = (hash * 31) ^ [@(__unionPay) hash];
  }
  hash = (hash * 31) ^ __mobilePay_isset ? 2654435761 : 0;
  if (__mobilePay_isset)
  {
    hash = (hash * 31) ^ [@(__mobilePay) hash];
  }
  hash = (hash * 31) ^ __otherPay_isset ? 2654435761 : 0;
  if (__otherPay_isset)
  {
    hash = (hash * 31) ^ [@(__otherPay) hash];
  }
  hash = (hash * 31) ^ __takeAwayInfoList_isset ? 2654435761 : 0;
  if (__takeAwayInfoList_isset)
  {
    hash = (hash * 31) ^ [__takeAwayInfoList hash];
  }
  hash = (hash * 31) ^ __saleInDayTime_isset ? 2654435761 : 0;
  if (__saleInDayTime_isset)
  {
    hash = (hash * 31) ^ [__saleInDayTime hash];
  }
  hash = (hash * 31) ^ __saleInWeekTime_isset ? 2654435761 : 0;
  if (__saleInWeekTime_isset)
  {
    hash = (hash * 31) ^ [__saleInWeekTime hash];
  }
  hash = (hash * 31) ^ __takeAwayInfoListInDayTime_isset ? 2654435761 : 0;
  if (__takeAwayInfoListInDayTime_isset)
  {
    hash = (hash * 31) ^ [__takeAwayInfoListInDayTime hash];
  }
  hash = (hash * 31) ^ __takeAwayInfoListInWeekTime_isset ? 2654435761 : 0;
  if (__takeAwayInfoListInWeekTime_isset)
  {
    hash = (hash * 31) ^ [__takeAwayInfoListInWeekTime hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGDailyReportForShop class]]) {
    return NO;
  }
  TTGDailyReportForShop *other = (TTGDailyReportForShop *)anObject;
  if ((__unionPay_isset != other->__unionPay_isset) ||
      (__unionPay_isset && (__unionPay != other->__unionPay))) {
    return NO;
  }
  if ((__mobilePay_isset != other->__mobilePay_isset) ||
      (__mobilePay_isset && (__mobilePay != other->__mobilePay))) {
    return NO;
  }
  if ((__otherPay_isset != other->__otherPay_isset) ||
      (__otherPay_isset && (__otherPay != other->__otherPay))) {
    return NO;
  }
  if ((__takeAwayInfoList_isset != other->__takeAwayInfoList_isset) ||
      (__takeAwayInfoList_isset && ((__takeAwayInfoList || other->__takeAwayInfoList) && ![__takeAwayInfoList isEqual:other->__takeAwayInfoList]))) {
    return NO;
  }
  if ((__saleInDayTime_isset != other->__saleInDayTime_isset) ||
      (__saleInDayTime_isset && ((__saleInDayTime || other->__saleInDayTime) && ![__saleInDayTime isEqual:other->__saleInDayTime]))) {
    return NO;
  }
  if ((__saleInWeekTime_isset != other->__saleInWeekTime_isset) ||
      (__saleInWeekTime_isset && ((__saleInWeekTime || other->__saleInWeekTime) && ![__saleInWeekTime isEqual:other->__saleInWeekTime]))) {
    return NO;
  }
  if ((__takeAwayInfoListInDayTime_isset != other->__takeAwayInfoListInDayTime_isset) ||
      (__takeAwayInfoListInDayTime_isset && ((__takeAwayInfoListInDayTime || other->__takeAwayInfoListInDayTime) && ![__takeAwayInfoListInDayTime isEqual:other->__takeAwayInfoListInDayTime]))) {
    return NO;
  }
  if ((__takeAwayInfoListInWeekTime_isset != other->__takeAwayInfoListInWeekTime_isset) ||
      (__takeAwayInfoListInWeekTime_isset && ((__takeAwayInfoListInWeekTime || other->__takeAwayInfoListInWeekTime) && ![__takeAwayInfoListInWeekTime isEqual:other->__takeAwayInfoListInWeekTime]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__takeAwayInfoList release_stub];
  [__saleInDayTime release_stub];
  [__saleInWeekTime release_stub];
  [__takeAwayInfoListInDayTime release_stub];
  [__takeAwayInfoListInWeekTime release_stub];
  [super dealloc_stub];
}

- (double) unionPay {
  return __unionPay;
}

- (void) setUnionPay: (double) unionPay {
  __unionPay = unionPay;
  __unionPay_isset = YES;
}

- (BOOL) unionPayIsSet {
  return __unionPay_isset;
}

- (void) unsetUnionPay {
  __unionPay_isset = NO;
}

- (double) mobilePay {
  return __mobilePay;
}

- (void) setMobilePay: (double) mobilePay {
  __mobilePay = mobilePay;
  __mobilePay_isset = YES;
}

- (BOOL) mobilePayIsSet {
  return __mobilePay_isset;
}

- (void) unsetMobilePay {
  __mobilePay_isset = NO;
}

- (double) otherPay {
  return __otherPay;
}

- (void) setOtherPay: (double) otherPay {
  __otherPay = otherPay;
  __otherPay_isset = YES;
}

- (BOOL) otherPayIsSet {
  return __otherPay_isset;
}

- (void) unsetOtherPay {
  __otherPay_isset = NO;
}

- (NSMutableArray *) takeAwayInfoList {
  return [[__takeAwayInfoList retain_stub] autorelease_stub];
}

- (void) setTakeAwayInfoList: (NSMutableArray *) takeAwayInfoList {
  [takeAwayInfoList retain_stub];
  [__takeAwayInfoList release_stub];
  __takeAwayInfoList = takeAwayInfoList;
  __takeAwayInfoList_isset = YES;
}

- (BOOL) takeAwayInfoListIsSet {
  return __takeAwayInfoList_isset;
}

- (void) unsetTakeAwayInfoList {
  [__takeAwayInfoList release_stub];
  __takeAwayInfoList = nil;
  __takeAwayInfoList_isset = NO;
}

- (NSMutableArray *) saleInDayTime {
  return [[__saleInDayTime retain_stub] autorelease_stub];
}

- (void) setSaleInDayTime: (NSMutableArray *) saleInDayTime {
  [saleInDayTime retain_stub];
  [__saleInDayTime release_stub];
  __saleInDayTime = saleInDayTime;
  __saleInDayTime_isset = YES;
}

- (BOOL) saleInDayTimeIsSet {
  return __saleInDayTime_isset;
}

- (void) unsetSaleInDayTime {
  [__saleInDayTime release_stub];
  __saleInDayTime = nil;
  __saleInDayTime_isset = NO;
}

- (NSMutableArray *) saleInWeekTime {
  return [[__saleInWeekTime retain_stub] autorelease_stub];
}

- (void) setSaleInWeekTime: (NSMutableArray *) saleInWeekTime {
  [saleInWeekTime retain_stub];
  [__saleInWeekTime release_stub];
  __saleInWeekTime = saleInWeekTime;
  __saleInWeekTime_isset = YES;
}

- (BOOL) saleInWeekTimeIsSet {
  return __saleInWeekTime_isset;
}

- (void) unsetSaleInWeekTime {
  [__saleInWeekTime release_stub];
  __saleInWeekTime = nil;
  __saleInWeekTime_isset = NO;
}

- (NSMutableArray *) takeAwayInfoListInDayTime {
  return [[__takeAwayInfoListInDayTime retain_stub] autorelease_stub];
}

- (void) setTakeAwayInfoListInDayTime: (NSMutableArray *) takeAwayInfoListInDayTime {
  [takeAwayInfoListInDayTime retain_stub];
  [__takeAwayInfoListInDayTime release_stub];
  __takeAwayInfoListInDayTime = takeAwayInfoListInDayTime;
  __takeAwayInfoListInDayTime_isset = YES;
}

- (BOOL) takeAwayInfoListInDayTimeIsSet {
  return __takeAwayInfoListInDayTime_isset;
}

- (void) unsetTakeAwayInfoListInDayTime {
  [__takeAwayInfoListInDayTime release_stub];
  __takeAwayInfoListInDayTime = nil;
  __takeAwayInfoListInDayTime_isset = NO;
}

- (NSMutableArray *) takeAwayInfoListInWeekTime {
  return [[__takeAwayInfoListInWeekTime retain_stub] autorelease_stub];
}

- (void) setTakeAwayInfoListInWeekTime: (NSMutableArray *) takeAwayInfoListInWeekTime {
  [takeAwayInfoListInWeekTime retain_stub];
  [__takeAwayInfoListInWeekTime release_stub];
  __takeAwayInfoListInWeekTime = takeAwayInfoListInWeekTime;
  __takeAwayInfoListInWeekTime_isset = YES;
}

- (BOOL) takeAwayInfoListInWeekTimeIsSet {
  return __takeAwayInfoListInWeekTime_isset;
}

- (void) unsetTakeAwayInfoListInWeekTime {
  [__takeAwayInfoListInWeekTime release_stub];
  __takeAwayInfoListInWeekTime = nil;
  __takeAwayInfoListInWeekTime_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setUnionPay: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setMobilePay: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setOtherPay: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size25;
          [inProtocol readListBeginReturningElementType: NULL size: &_size25];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            TTGTakeAwayInfo *_elem27 = [[TTGTakeAwayInfo alloc] init];
            [_elem27 read: inProtocol];
            [fieldValue addObject: _elem27];
            [_elem27 release_stub];
          }
          [inProtocol readListEnd];
          [self setTakeAwayInfoList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size28;
          [inProtocol readListBeginReturningElementType: NULL size: &_size28];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size28];
          int _i29;
          for (_i29 = 0; _i29 < _size28; ++_i29)
          {
            int _size31;
            [inProtocol readListBeginReturningElementType: NULL size: &_size31];
            NSMutableArray * _elem30 = [[NSMutableArray alloc] initWithCapacity: _size31];
            int _i32;
            for (_i32 = 0; _i32 < _size31; ++_i32)
            {
              TTGDailyDataForSale *_elem33 = [[TTGDailyDataForSale alloc] init];
              [_elem33 read: inProtocol];
              [_elem30 addObject: _elem33];
              [_elem33 release_stub];
            }
            [inProtocol readListEnd];
            [fieldValue addObject: _elem30];
            [_elem30 release_stub];
          }
          [inProtocol readListEnd];
          [self setSaleInDayTime: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_LIST) {
          int _size34;
          [inProtocol readListBeginReturningElementType: NULL size: &_size34];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size34];
          int _i35;
          for (_i35 = 0; _i35 < _size34; ++_i35)
          {
            int _size37;
            [inProtocol readListBeginReturningElementType: NULL size: &_size37];
            NSMutableArray * _elem36 = [[NSMutableArray alloc] initWithCapacity: _size37];
            int _i38;
            for (_i38 = 0; _i38 < _size37; ++_i38)
            {
              TTGDailyDataForSale *_elem39 = [[TTGDailyDataForSale alloc] init];
              [_elem39 read: inProtocol];
              [_elem36 addObject: _elem39];
              [_elem39 release_stub];
            }
            [inProtocol readListEnd];
            [fieldValue addObject: _elem36];
            [_elem36 release_stub];
          }
          [inProtocol readListEnd];
          [self setSaleInWeekTime: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_LIST) {
          int _size40;
          [inProtocol readListBeginReturningElementType: NULL size: &_size40];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size40];
          int _i41;
          for (_i41 = 0; _i41 < _size40; ++_i41)
          {
            int _size43;
            [inProtocol readListBeginReturningElementType: NULL size: &_size43];
            NSMutableArray * _elem42 = [[NSMutableArray alloc] initWithCapacity: _size43];
            int _i44;
            for (_i44 = 0; _i44 < _size43; ++_i44)
            {
              TTGTakeAwayInfo *_elem45 = [[TTGTakeAwayInfo alloc] init];
              [_elem45 read: inProtocol];
              [_elem42 addObject: _elem45];
              [_elem45 release_stub];
            }
            [inProtocol readListEnd];
            [fieldValue addObject: _elem42];
            [_elem42 release_stub];
          }
          [inProtocol readListEnd];
          [self setTakeAwayInfoListInDayTime: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_LIST) {
          int _size46;
          [inProtocol readListBeginReturningElementType: NULL size: &_size46];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size46];
          int _i47;
          for (_i47 = 0; _i47 < _size46; ++_i47)
          {
            int _size49;
            [inProtocol readListBeginReturningElementType: NULL size: &_size49];
            NSMutableArray * _elem48 = [[NSMutableArray alloc] initWithCapacity: _size49];
            int _i50;
            for (_i50 = 0; _i50 < _size49; ++_i50)
            {
              TTGTakeAwayInfo *_elem51 = [[TTGTakeAwayInfo alloc] init];
              [_elem51 read: inProtocol];
              [_elem48 addObject: _elem51];
              [_elem51 release_stub];
            }
            [inProtocol readListEnd];
            [fieldValue addObject: _elem48];
            [_elem48 release_stub];
          }
          [inProtocol readListEnd];
          [self setTakeAwayInfoListInWeekTime: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DailyReportForShop"];
  if (__unionPay_isset) {
    [outProtocol writeFieldBeginWithName: @"unionPay" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __unionPay];
    [outProtocol writeFieldEnd];
  }
  if (__mobilePay_isset) {
    [outProtocol writeFieldBeginWithName: @"mobilePay" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __mobilePay];
    [outProtocol writeFieldEnd];
  }
  if (__otherPay_isset) {
    [outProtocol writeFieldBeginWithName: @"otherPay" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __otherPay];
    [outProtocol writeFieldEnd];
  }
  if (__takeAwayInfoList_isset) {
    if (__takeAwayInfoList != nil) {
      [outProtocol writeFieldBeginWithName: @"takeAwayInfoList" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__takeAwayInfoList count]];
        int idx53;
        for (idx53 = 0; idx53 < [__takeAwayInfoList count]; idx53++)
        {
          [[__takeAwayInfoList objectAtIndex: idx53] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__saleInDayTime_isset) {
    if (__saleInDayTime != nil) {
      [outProtocol writeFieldBeginWithName: @"saleInDayTime" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_LIST size: [__saleInDayTime count]];
        int idx55;
        for (idx55 = 0; idx55 < [__saleInDayTime count]; idx55++)
        {
          {
            [outProtocol writeListBeginWithElementType: TType_STRUCT size: [[__saleInDayTime objectAtIndex: idx55] count]];
            int idx57;
            for (idx57 = 0; idx57 < [[__saleInDayTime objectAtIndex: idx55] count]; idx57++)
            {
              [[[__saleInDayTime objectAtIndex: idx55] objectAtIndex: idx57] write: outProtocol];
            }
            [outProtocol writeListEnd];
          }
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__saleInWeekTime_isset) {
    if (__saleInWeekTime != nil) {
      [outProtocol writeFieldBeginWithName: @"saleInWeekTime" type: TType_LIST fieldID: 6];
      {
        [outProtocol writeListBeginWithElementType: TType_LIST size: [__saleInWeekTime count]];
        int idx59;
        for (idx59 = 0; idx59 < [__saleInWeekTime count]; idx59++)
        {
          {
            [outProtocol writeListBeginWithElementType: TType_STRUCT size: [[__saleInWeekTime objectAtIndex: idx59] count]];
            int idx61;
            for (idx61 = 0; idx61 < [[__saleInWeekTime objectAtIndex: idx59] count]; idx61++)
            {
              [[[__saleInWeekTime objectAtIndex: idx59] objectAtIndex: idx61] write: outProtocol];
            }
            [outProtocol writeListEnd];
          }
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__takeAwayInfoListInDayTime_isset) {
    if (__takeAwayInfoListInDayTime != nil) {
      [outProtocol writeFieldBeginWithName: @"takeAwayInfoListInDayTime" type: TType_LIST fieldID: 7];
      {
        [outProtocol writeListBeginWithElementType: TType_LIST size: [__takeAwayInfoListInDayTime count]];
        int idx63;
        for (idx63 = 0; idx63 < [__takeAwayInfoListInDayTime count]; idx63++)
        {
          {
            [outProtocol writeListBeginWithElementType: TType_STRUCT size: [[__takeAwayInfoListInDayTime objectAtIndex: idx63] count]];
            int idx65;
            for (idx65 = 0; idx65 < [[__takeAwayInfoListInDayTime objectAtIndex: idx63] count]; idx65++)
            {
              [[[__takeAwayInfoListInDayTime objectAtIndex: idx63] objectAtIndex: idx65] write: outProtocol];
            }
            [outProtocol writeListEnd];
          }
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__takeAwayInfoListInWeekTime_isset) {
    if (__takeAwayInfoListInWeekTime != nil) {
      [outProtocol writeFieldBeginWithName: @"takeAwayInfoListInWeekTime" type: TType_LIST fieldID: 8];
      {
        [outProtocol writeListBeginWithElementType: TType_LIST size: [__takeAwayInfoListInWeekTime count]];
        int idx67;
        for (idx67 = 0; idx67 < [__takeAwayInfoListInWeekTime count]; idx67++)
        {
          {
            [outProtocol writeListBeginWithElementType: TType_STRUCT size: [[__takeAwayInfoListInWeekTime objectAtIndex: idx67] count]];
            int idx69;
            for (idx69 = 0; idx69 < [[__takeAwayInfoListInWeekTime objectAtIndex: idx67] count]; idx69++)
            {
              [[[__takeAwayInfoListInWeekTime objectAtIndex: idx67] objectAtIndex: idx69] write: outProtocol];
            }
            [outProtocol writeListEnd];
          }
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGDailyReportForShop("];
  [ms appendString: @"unionPay:"];
  [ms appendFormat: @"%f", __unionPay];
  [ms appendString: @",mobilePay:"];
  [ms appendFormat: @"%f", __mobilePay];
  [ms appendString: @",otherPay:"];
  [ms appendFormat: @"%f", __otherPay];
  [ms appendString: @",takeAwayInfoList:"];
  [ms appendFormat: @"%@", __takeAwayInfoList];
  [ms appendString: @",saleInDayTime:"];
  [ms appendFormat: @"%@", __saleInDayTime];
  [ms appendString: @",saleInWeekTime:"];
  [ms appendFormat: @"%@", __saleInWeekTime];
  [ms appendString: @",takeAwayInfoListInDayTime:"];
  [ms appendFormat: @"%@", __takeAwayInfoListInDayTime];
  [ms appendString: @",takeAwayInfoListInWeekTime:"];
  [ms appendFormat: @"%@", __takeAwayInfoListInWeekTime];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTGdailyReportForShopRequest_C

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDate: (double) date sid: (NSString *) sid
{
  self = [super init];
  __date = date;
  __date_isset = YES;
  __sid = [sid retain_stub];
  __sid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"date"])
  {
    __date = [decoder decodeDoubleForKey: @"date"];
    __date_isset = YES;
  }
  if ([decoder containsValueForKey: @"sid"])
  {
    __sid = [[decoder decodeObjectForKey: @"sid"] retain_stub];
    __sid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__date_isset)
  {
    [encoder encodeDouble: __date forKey: @"date"];
  }
  if (__sid_isset)
  {
    [encoder encodeObject: __sid forKey: @"sid"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __date_isset ? 2654435761 : 0;
  if (__date_isset)
  {
    hash = (hash * 31) ^ [@(__date) hash];
  }
  hash = (hash * 31) ^ __sid_isset ? 2654435761 : 0;
  if (__sid_isset)
  {
    hash = (hash * 31) ^ [__sid hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGdailyReportForShopRequest_C class]]) {
    return NO;
  }
  TTGdailyReportForShopRequest_C *other = (TTGdailyReportForShopRequest_C *)anObject;
  if ((__date_isset != other->__date_isset) ||
      (__date_isset && (__date != other->__date))) {
    return NO;
  }
  if ((__sid_isset != other->__sid_isset) ||
      (__sid_isset && ((__sid || other->__sid) && ![__sid isEqual:other->__sid]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__sid release_stub];
  [super dealloc_stub];
}

- (double) date {
  return __date;
}

- (void) setDate: (double) date {
  __date = date;
  __date_isset = YES;
}

- (BOOL) dateIsSet {
  return __date_isset;
}

- (void) unsetDate {
  __date_isset = NO;
}

- (NSString *) sid {
  return [[__sid retain_stub] autorelease_stub];
}

- (void) setSid: (NSString *) sid {
  [sid retain_stub];
  [__sid release_stub];
  __sid = sid;
  __sid_isset = YES;
}

- (BOOL) sidIsSet {
  return __sid_isset;
}

- (void) unsetSid {
  [__sid release_stub];
  __sid = nil;
  __sid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"dailyReportForShopRequest_C"];
  if (__date_isset) {
    [outProtocol writeFieldBeginWithName: @"date" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __date];
    [outProtocol writeFieldEnd];
  }
  if (__sid_isset) {
    if (__sid != nil) {
      [outProtocol writeFieldBeginWithName: @"sid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __sid];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGdailyReportForShopRequest_C("];
  [ms appendString: @"date:"];
  [ms appendFormat: @"%f", __date];
  [ms appendString: @",sid:"];
  [ms appendFormat: @"\"%@\"", __sid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTGdailyReportForShopRequest_S

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithState: (int) state message: (NSString *) message dailyReportForShop: (TTGDailyReportForShop *) dailyReportForShop
{
  self = [super init];
  __state = state;
  __state_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  __dailyReportForShop = [dailyReportForShop retain_stub];
  __dailyReportForShop_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"state"])
  {
    __state = [decoder decodeIntForKey: @"state"];
    __state_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"dailyReportForShop"])
  {
    __dailyReportForShop = [[decoder decodeObjectForKey: @"dailyReportForShop"] retain_stub];
    __dailyReportForShop_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__state_isset)
  {
    [encoder encodeInt: __state forKey: @"state"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__dailyReportForShop_isset)
  {
    [encoder encodeObject: __dailyReportForShop forKey: @"dailyReportForShop"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __state_isset ? 2654435761 : 0;
  if (__state_isset)
  {
    hash = (hash * 31) ^ [@(__state) hash];
  }
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __dailyReportForShop_isset ? 2654435761 : 0;
  if (__dailyReportForShop_isset)
  {
    hash = (hash * 31) ^ [__dailyReportForShop hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGdailyReportForShopRequest_S class]]) {
    return NO;
  }
  TTGdailyReportForShopRequest_S *other = (TTGdailyReportForShopRequest_S *)anObject;
  if ((__state_isset != other->__state_isset) ||
      (__state_isset && (__state != other->__state))) {
    return NO;
  }
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__dailyReportForShop_isset != other->__dailyReportForShop_isset) ||
      (__dailyReportForShop_isset && ((__dailyReportForShop || other->__dailyReportForShop) && ![__dailyReportForShop isEqual:other->__dailyReportForShop]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__dailyReportForShop release_stub];
  [super dealloc_stub];
}

- (int) state {
  return __state;
}

- (void) setState: (int) state {
  __state = state;
  __state_isset = YES;
}

- (BOOL) stateIsSet {
  return __state_isset;
}

- (void) unsetState {
  __state_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (TTGDailyReportForShop *) dailyReportForShop {
  return [[__dailyReportForShop retain_stub] autorelease_stub];
}

- (void) setDailyReportForShop: (TTGDailyReportForShop *) dailyReportForShop {
  [dailyReportForShop retain_stub];
  [__dailyReportForShop release_stub];
  __dailyReportForShop = dailyReportForShop;
  __dailyReportForShop_isset = YES;
}

- (BOOL) dailyReportForShopIsSet {
  return __dailyReportForShop_isset;
}

- (void) unsetDailyReportForShop {
  [__dailyReportForShop release_stub];
  __dailyReportForShop = nil;
  __dailyReportForShop_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          TTGDailyReportForShop *fieldValue = [[TTGDailyReportForShop alloc] init];
          [fieldValue read: inProtocol];
          [self setDailyReportForShop: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"dailyReportForShopRequest_S"];
  if (__state_isset) {
    [outProtocol writeFieldBeginWithName: @"state" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __state];
    [outProtocol writeFieldEnd];
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dailyReportForShop_isset) {
    if (__dailyReportForShop != nil) {
      [outProtocol writeFieldBeginWithName: @"dailyReportForShop" type: TType_STRUCT fieldID: 3];
      [__dailyReportForShop write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGdailyReportForShopRequest_S("];
  [ms appendString: @"state:"];
  [ms appendFormat: @"%i", __state];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",dailyReportForShop:"];
  [ms appendFormat: @"%@", __dailyReportForShop];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation TTGcxwConstants
+ (void) initialize {
}
@end

@interface TTGdailyReportRequest_args : NSObject <TBase, NSCoding> {
  TTGdailyReportRequest_C * __data;

  BOOL __data_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=data, setter=setData:) TTGdailyReportRequest_C * data;
#endif

- (id) init;
- (id) initWithData: (TTGdailyReportRequest_C *) data;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TTGdailyReportRequest_C *) data;
- (void) setData: (TTGdailyReportRequest_C *) data;
#endif
- (BOOL) dataIsSet;

@end

@implementation TTGdailyReportRequest_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithData: (TTGdailyReportRequest_C *) data
{
  self = [super init];
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGdailyReportRequest_args class]]) {
    return NO;
  }
  TTGdailyReportRequest_args *other = (TTGdailyReportRequest_args *)anObject;
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__data release_stub];
  [super dealloc_stub];
}

- (TTGdailyReportRequest_C *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (TTGdailyReportRequest_C *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TTGdailyReportRequest_C *fieldValue = [[TTGdailyReportRequest_C alloc] init];
          [fieldValue read: inProtocol];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"dailyReportRequest_args"];
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_STRUCT fieldID: 1];
      [__data write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGdailyReportRequest_args("];
  [ms appendString: @"data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface TTGDailyReportRequest_result : NSObject <TBase, NSCoding> {
  TTGdailyReportRequest_S * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TTGdailyReportRequest_S * success;
#endif

- (id) init;
- (id) initWithSuccess: (TTGdailyReportRequest_S *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TTGdailyReportRequest_S *) success;
- (void) setSuccess: (TTGdailyReportRequest_S *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation TTGDailyReportRequest_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TTGdailyReportRequest_S *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGDailyReportRequest_result class]]) {
    return NO;
  }
  TTGDailyReportRequest_result *other = (TTGDailyReportRequest_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (TTGdailyReportRequest_S *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TTGdailyReportRequest_S *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TTGdailyReportRequest_S *fieldValue = [[TTGdailyReportRequest_S alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DailyReportRequest_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGDailyReportRequest_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface TTGdailyRankRequest_args : NSObject <TBase, NSCoding> {
  TTGdailyRankRequest_C * __data;

  BOOL __data_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=data, setter=setData:) TTGdailyRankRequest_C * data;
#endif

- (id) init;
- (id) initWithData: (TTGdailyRankRequest_C *) data;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TTGdailyRankRequest_C *) data;
- (void) setData: (TTGdailyRankRequest_C *) data;
#endif
- (BOOL) dataIsSet;

@end

@implementation TTGdailyRankRequest_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithData: (TTGdailyRankRequest_C *) data
{
  self = [super init];
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGdailyRankRequest_args class]]) {
    return NO;
  }
  TTGdailyRankRequest_args *other = (TTGdailyRankRequest_args *)anObject;
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__data release_stub];
  [super dealloc_stub];
}

- (TTGdailyRankRequest_C *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (TTGdailyRankRequest_C *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TTGdailyRankRequest_C *fieldValue = [[TTGdailyRankRequest_C alloc] init];
          [fieldValue read: inProtocol];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"dailyRankRequest_args"];
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_STRUCT fieldID: 1];
      [__data write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGdailyRankRequest_args("];
  [ms appendString: @"data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface TTGDailyRankRequest_result : NSObject <TBase, NSCoding> {
  TTGdailyRankRequest_S * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TTGdailyRankRequest_S * success;
#endif

- (id) init;
- (id) initWithSuccess: (TTGdailyRankRequest_S *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TTGdailyRankRequest_S *) success;
- (void) setSuccess: (TTGdailyRankRequest_S *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation TTGDailyRankRequest_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TTGdailyRankRequest_S *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGDailyRankRequest_result class]]) {
    return NO;
  }
  TTGDailyRankRequest_result *other = (TTGDailyRankRequest_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (TTGdailyRankRequest_S *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TTGdailyRankRequest_S *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TTGdailyRankRequest_S *fieldValue = [[TTGdailyRankRequest_S alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DailyRankRequest_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGDailyRankRequest_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface TTGdailyReportForShopRequest_args : NSObject <TBase, NSCoding> {
  TTGdailyReportForShopRequest_C * __data;

  BOOL __data_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=data, setter=setData:) TTGdailyReportForShopRequest_C * data;
#endif

- (id) init;
- (id) initWithData: (TTGdailyReportForShopRequest_C *) data;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TTGdailyReportForShopRequest_C *) data;
- (void) setData: (TTGdailyReportForShopRequest_C *) data;
#endif
- (BOOL) dataIsSet;

@end

@implementation TTGdailyReportForShopRequest_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithData: (TTGdailyReportForShopRequest_C *) data
{
  self = [super init];
  __data = [data retain_stub];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGdailyReportForShopRequest_args class]]) {
    return NO;
  }
  TTGdailyReportForShopRequest_args *other = (TTGdailyReportForShopRequest_args *)anObject;
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__data release_stub];
  [super dealloc_stub];
}

- (TTGdailyReportForShopRequest_C *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (TTGdailyReportForShopRequest_C *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TTGdailyReportForShopRequest_C *fieldValue = [[TTGdailyReportForShopRequest_C alloc] init];
          [fieldValue read: inProtocol];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"dailyReportForShopRequest_args"];
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_STRUCT fieldID: 1];
      [__data write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGdailyReportForShopRequest_args("];
  [ms appendString: @"data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface TTGDailyReportForShopRequest_result : NSObject <TBase, NSCoding> {
  TTGdailyReportForShopRequest_S * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TTGdailyReportForShopRequest_S * success;
#endif

- (id) init;
- (id) initWithSuccess: (TTGdailyReportForShopRequest_S *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TTGdailyReportForShopRequest_S *) success;
- (void) setSuccess: (TTGdailyReportForShopRequest_S *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation TTGDailyReportForShopRequest_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TTGdailyReportForShopRequest_S *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TTGDailyReportForShopRequest_result class]]) {
    return NO;
  }
  TTGDailyReportForShopRequest_result *other = (TTGDailyReportForShopRequest_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (TTGdailyReportForShopRequest_S *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TTGdailyReportForShopRequest_S *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TTGdailyReportForShopRequest_S *fieldValue = [[TTGdailyReportForShopRequest_S alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DailyReportForShopRequest_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TTGDailyReportForShopRequest_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TTGTTGServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_dailyReportRequest: (TTGdailyReportRequest_C *) data
{
  [outProtocol writeMessageBeginWithName: @"dailyReportRequest" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"dailyReportRequest_args"];
  if (data != nil)  {
    [outProtocol writeFieldBeginWithName: @"data" type: TType_STRUCT fieldID: 1];
    [data write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (TTGdailyReportRequest_S *) recv_dailyReportRequest
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  TTGDailyReportRequest_result * result = [[[TTGDailyReportRequest_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"dailyReportRequest failed: unknown result"];
}

- (TTGdailyReportRequest_S *) dailyReportRequest: (TTGdailyReportRequest_C *) data
{
  [self send_dailyReportRequest : data];
  [[outProtocol transport] flush];
  return [self recv_dailyReportRequest];
}

- (void) send_dailyRankRequest: (TTGdailyRankRequest_C *) data
{
  [outProtocol writeMessageBeginWithName: @"dailyRankRequest" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"dailyRankRequest_args"];
  if (data != nil)  {
    [outProtocol writeFieldBeginWithName: @"data" type: TType_STRUCT fieldID: 1];
    [data write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (TTGdailyRankRequest_S *) recv_dailyRankRequest
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  TTGDailyRankRequest_result * result = [[[TTGDailyRankRequest_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"dailyRankRequest failed: unknown result"];
}

- (TTGdailyRankRequest_S *) dailyRankRequest: (TTGdailyRankRequest_C *) data
{
  [self send_dailyRankRequest : data];
  [[outProtocol transport] flush];
  return [self recv_dailyRankRequest];
}

- (void) send_dailyReportForShopRequest: (TTGdailyReportForShopRequest_C *) data
{
  [outProtocol writeMessageBeginWithName: @"dailyReportForShopRequest" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"dailyReportForShopRequest_args"];
  if (data != nil)  {
    [outProtocol writeFieldBeginWithName: @"data" type: TType_STRUCT fieldID: 1];
    [data write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (TTGdailyReportForShopRequest_S *) recv_dailyReportForShopRequest
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  TTGDailyReportForShopRequest_result * result = [[[TTGDailyReportForShopRequest_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"dailyReportForShopRequest failed: unknown result"];
}

- (TTGdailyReportForShopRequest_S *) dailyReportForShopRequest: (TTGdailyReportForShopRequest_C *) data
{
  [self send_dailyReportForShopRequest : data];
  [[outProtocol transport] flush];
  return [self recv_dailyReportForShopRequest];
}

@end

@implementation TTGTTGServiceProcessor

- (id) initWithTTGService: (id <TTGTTGService>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_dailyReportRequest_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"dailyReportRequest"];
}
{
  SEL s = @selector(process_dailyRankRequest_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"dailyRankRequest"];
}
{
  SEL s = @selector(process_dailyReportForShopRequest_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"dailyReportForShopRequest"];
}
return self;
}

- (id<TTGTTGService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_dailyReportRequest_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
TTGdailyReportRequest_args * args = [[TTGdailyReportRequest_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
TTGDailyReportRequest_result * result = [[TTGDailyReportRequest_result alloc] init];
[result setSuccess: [mService dailyReportRequest: [args data]]];
[outProtocol writeMessageBeginWithName: @"dailyReportRequest"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_dailyRankRequest_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
TTGdailyRankRequest_args * args = [[TTGdailyRankRequest_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
TTGDailyRankRequest_result * result = [[TTGDailyRankRequest_result alloc] init];
[result setSuccess: [mService dailyRankRequest: [args data]]];
[outProtocol writeMessageBeginWithName: @"dailyRankRequest"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_dailyReportForShopRequest_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
TTGdailyReportForShopRequest_args * args = [[TTGdailyReportForShopRequest_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
TTGDailyReportForShopRequest_result * result = [[TTGDailyReportForShopRequest_result alloc] init];
[result setSuccess: [mService dailyReportForShopRequest: [args data]]];
[outProtocol writeMessageBeginWithName: @"dailyReportForShopRequest"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

